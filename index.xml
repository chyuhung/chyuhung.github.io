<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 十二万光年</title>
      <link>https://chyuhung.github.io</link>
      <description>最近的10条笔记 on 🪴 十二万光年</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>mysql</title>
    <link>https://chyuhung.github.io/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/mysql</link>
    <guid>https://chyuhung.github.io/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/mysql</guid>
    <description></description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item><item>
    <title>pgsql</title>
    <link>https://chyuhung.github.io/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/pgsql</link>
    <guid>https://chyuhung.github.io/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/pgsql</guid>
    <description></description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item><item>
    <title>网络和存储管理</title>
    <link>https://chyuhung.github.io/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86</link>
    <guid>https://chyuhung.github.io/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86</guid>
    <description> 网络和存储管理 网络设备的配置和管理 存储管理和数据备份策略 数据库管理（如 MySQL、PostgreSQL、MongoDB） .</description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item><item>
    <title>jinja2</title>
    <link>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/Jinja2</link>
    <guid>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/Jinja2</guid>
    <description>特点 语法简洁：Jinja2使用简洁而易读的语法，使用大括号{{ }}表示变量插值，使用{% %}表示控制流语句（如条件和循环），以及使用{# #}表示注释 变量插值：Jinja2允许在模板中插入变量的值。可以将变量直接插入到模板中，或者使用过滤器对变量进行处理和格式化 控制流语句：Jinja2支持条件语句（如if、else、elif）和循环语句（如for、while）。这些语句允许根据条件或迭代集合来控制模板的输出 模板继承：Jinja2支持模板继承，可以定义一个基础模板（父模板），然后在派生模板（子模板）中根据需要重写和扩展父模板的内容 过滤器和函数：Jinja2提供了多个内置过滤器和函数，用于对变量进行处理和转换。可以使用这些过滤器和函数对变量进行格式化、截取、排序等操作 宏（Macro）：宏是一种用于定义可重用代码块的机制。可以使用宏来定义一段代码，并在模板的其他地方多次调用该代码块 自定义扩展：Jinja2允许开发者自定义扩展，以增加额外的功能和语法。可以编写自定义过滤器、函数、测试等，以满足特定的需求 短横线 在Jinja2模板语言中，花括号 { 和 } 用来包裹模板标签，而短横线 - 在某些情况下用于移除生成的HTML或文本输出中的空白字符，包括换行和空格。在循环 {% for .</description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item><item>
    <title>ansible</title>
    <link>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/ansible</link>
    <guid>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/ansible</guid>
    <description>简介 基于Python开源的自动化工具，用于配置管理、部署、编排和远程执行任务，它使用SSH协议进行通信，由Paramiko（Python库）、 PyYAML和Jinja2 ( 模板化 ) 三个关键模块实现，并使用基于YAML的描述文件来定义任务和配置 特性 模块化 无客户端 主从模式 幂等性 关键参数 主机清单（Inventory）：主机清单是一个YAML或INI格式的文件，用于定义受管理的主机和主机组，它指定了Ansible将在哪些主机上执行任务 模块（Module）：模块是Ansible的基本执行单元，用于在目标主机上执行特定的任务，Ansible提供了丰富的模块库，包括文件操作、软件包管理、用户管理等各种功能 Playbook（剧本）：Playbook是一个YAML格式的文件，用于定义一系列任务和配置的顺序，它描述了Ansible在目标主机上执行的操作流程，包括主机选择、任务执行和变量设置等 角色（Role）：角色是一种组织和复用任务和配置的方法，它将相关的任务、变量和文件组织在一起，以便在多个Playbook中重复使用 变量（Variable）：变量用于存储和传递数据，在Playbook中可以使用变量来实现灵活的配置，变量可以在主机清单、Playbook和角色中定义，并可以通过模板或命令行参数进行动态设置 Handlers：Handlers是一种特殊的任务，它用于响应其他任务的状态变化，当某个任务发生变化时，Handlers可以触发相应的操作，如重新启动服务、重新加载配置等 模板（Template）：模板是一种用于生成配置文件的机制，Ansible使用jinja2模板引擎，可以在模板中使用变量和条件语句来动态生成配置文件 Vault：Vault用于安全地存储敏感信息，如密码和密钥，它可以加密和解密Ansible的变量文件，以防止敏感信息泄露 开始 [root@localhost ~]# ansible localhost -m command -a &#039;echo hello world!&#039; localhost | CHANGED | rc=0 &gt;&gt; hello world! Ad-Hoc command 简短地指令，指令操作模式 [root@localhost ansible]# ansible local -m ping 10.</description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item><item>
    <title>git</title>
    <link>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/git</link>
    <guid>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/git</guid>
    <description>删除本地分支并同步远程 要删除本地分支并同步到远程仓库：首先删除本地分支，然后删除远程分支 1. 删除本地分支 可以使用 git branch 命令来列出所有分支，然后使用 git branch -d &lt;branch_name&gt; 或 git branch -D &lt;branch_name&gt; 来删除本地分支。 -d 选项用于删除已经合并到当前分支的分支。 -D 选项用于强制删除尚未合并的分支（请注意大写 “D”）。 例如，要删除名为 feature-branch 的本地分支，可以执行： git branch -d feature-branch 或者，如果该分支尚未合并，则使用： git branch -D feature-branch 2.</description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item><item>
    <title>github actions</title>
    <link>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/github-actions</link>
    <guid>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/github-actions</guid>
    <description></description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item><item>
    <title>自动化和编程</title>
    <link>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B</link>
    <guid>https://chyuhung.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E7%BC%96%E7%A8%8B</guid>
    <description> 自动化和编程 自动化工具（如 Ansible、Chef、Puppet） 脚本编程和编写自动化脚本 版本控制系统（如 Git、SVN） .</description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item><item>
    <title>go</title>
    <link>https://chyuhung.github.io/%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD/go</link>
    <guid>https://chyuhung.github.io/%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD/go</guid>
    <description>跨平台代码 典型“动态语言思维”的错误 if runtime.GOOS == &quot;windows&quot; { return nil } .</description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item><item>
    <title>python</title>
    <link>https://chyuhung.github.io/%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD/python</link>
    <guid>https://chyuhung.github.io/%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD/python</guid>
    <description>初识Python 版本 版本号分为三段，形如A.B.C，版本大更新增加A，新功能增加B，小改动增加C 优缺点 优点 简单，学习曲线低 开放源代码，生态强大 解释型语言移植性强 支持面向对象和函数式编程 代码规范可读性强 缺点 执行效率稍微低 代码无法加密 解释器 官方的Python解释器是用C语言实现的，也是使用最为广泛的Python解释器，通常称之为CPython 应用领域 后端开发、DevOps、爬虫、自动化测试、数据分析、机器学习 运行 单行注释以#开头，多行注释以&#039;&#039;&#039;开头和结尾 # hello world 示例 print(&#039;hello, world!&#039;) 开发工具 安装python 自带集成开发工具IDLE（命令行交互式），实际开发不方便使用，通常使用pycharm或者vscode 语言元素 以python3进行总结 整型 int 0b100 0x100 0o100 浮点型 123.</description>
    <pubDate>Thu, 04 Jul 2024 03:39:42 GMT</pubDate>
  </item>
    </channel>
  </rss>