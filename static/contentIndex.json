{"index":{"title":"index","links":["工具/git/git命令"],"tags":[],"content":"Hi , Welcome!\n你好谢谢！\n我的第一篇 git命令\nhello!\n加了一句测试"},"linux/linux基础命令":{"title":"linux基础命令","links":["链接地址"],"tags":[],"content":"linux基础命令\n// 切换到root用户\nsudo -i\n// 切换到root用户\nsu\n// 切换到root用户\nsudo su\n图片测试\n\n代码测试\n#include &lt;stdio.h&gt;\n\nint main() {\n    printf(&quot;Hello, World!\\n&quot;);\n    return 0;\n}\n\n链接测试\n链接名称\n维基百科\n维基百科\n公式测试\nV1​×V2​=​i∂u∂X​∂v∂X​​j∂u∂Y​∂v∂Y​​k00​​\n表格测试\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n表头1表头2单元格1单元格2单元格3单元格4\n列表测试\n\n列表项1\n列表项2\n列表项3\n\n引用测试\n\n这是一个引用。\n\n粗体测试\n这是粗体文本。\n斜体测试\n这是斜体文本。\n删除线测试\n这是删除线文本。\n代码块测试\n#include &lt;stdio.h&gt;\n \nint main() {\n    printf(&quot;Hello, World!\\n&quot;);\n    return 0;\n}\n水平线测试\n\n行内代码测试\n这是printf()函数的示例。\n脚注测试\n这是脚注1的示例。\n目录测试\n[TOC]\n数学公式测试\nE=mc2\n流程图测试\nst=&gt;start: Start:&gt;https://www.google.com\ne=&gt;end\nop1=&gt;operation: My Operation\nsub1=&gt;subroutine: My Subroutine\ncond=&gt;condition: Yes\nor No?:&gt;https://www.google.com\nio=&gt;inputoutput: catch something...\n \nst-&gt;op1-&gt;cond\ncond(yes)-&gt;io-&gt;e\ncond(no)-&gt;sub1(right)-&gt;op1\nUML测试\nAlice-&gt;Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob--&gt;Alice: I am good thanks!\n图片测试\n\nFootnotes\n\n\n这是脚注的内容。 ↩\n\n\n"},"工具/git/git命令":{"title":"git命令","links":[],"tags":[],"content":"常规命令\n查看所有分支\ngit ls-remote --heads ssh://git@10.254.180.148:20495/PZCPHPT.ZDHBS/auto_upgrade_script.git\n\n克隆最近一次提交\ngit clone --depth=1 ssh://git@10.254.180.148:20495/PZCPHPT.ZDHBS/auto_upgrade_script.git\n\n配置用户名、邮箱\ngit config --global user.name chengyh\ngit config --global user.email chengyh@si-tech.com.cn\n\n大仓库拉取\n一、常规方式\n1、拉取指定分支\ngit clone -b dev ssh://git@xxxx/xxxx/auto_deploy_script.git\n2、指定分支并只拉取最近一次提交\ngit clone -b dev --depth=1 ssh://git@xxxx/xxxx/auto_upgrade_script.git\n二、新建空仓库拉取\n1、本地直接新建对应仓库\nmkdir &lt;repo名称&gt;\n2、初始化git仓库（即新建.git/）\ngit init\n3、配置remote origin\ngit remote add origin &lt;repo地址&gt;\n4、新建待拉取对应分支（默认为master）\ngit checkout -b &lt;对应分支名&gt;\n5、拉取特定分支\ngit pull origin &lt;对应分支名&gt;\n分支合并\n1、切换到特定分支并拉取最新代码，完成相关代码修改提交\ngit checkout feature-compmgmt1015\ngit pull\n2、切换到主分支，拉取最新代码\ngit  checkout dev\ngit pull\n3、合并代码到主分支\ngit merge feature-compmgmt1015\n# 解决有合并冲突的文件\n# git restore &lt;非我们改动的文件&gt;\n# git add . &amp;&amp; git commit -m &#039;解决有合并冲突的文件&#039;\ngit push\n4、查看git日志\ngit log\n5、恢复文件\ngit restore --staged .\ngit restore  .\n6、显示指定commit修改内容\ngit show 685b7067992b4ee1230fe38cc1c9dec2beb60e55\ngit status\n分支跟踪\n设置本地dev分支跟踪远程dev分支\n$ git remote -v\norigin  ssh://git@xxxx/xxxx/auto_upgrade_script.git (fetch)\norigin  ssh://git@xxxx/xxxx/auto_upgrade_script.git (push)\n \n$ git checkout dev\nSwitched to branch &#039;dev&#039;\n \n$  git branch --set-upstream-to=origin/dev dev\nbranch &#039;dev&#039; set up to track &#039;origin/dev&#039;."}}