{"index":{"title":"welcome to my digital garden","links":["tags"],"tags":[],"content":"数字花园 是我的一种全新的尝试，既然叫做数字花园，那么我希望它应该向阳而肆意生长，摆脱苦恼与烦闷！\n开始浏览我的数字花园tags\n搭建数字花园（Quartz）官方文档 Welcome to Quartz 4 (jzhao.xyz)\n\n我的数字花园部署结构\n\n私有仓库（quartz-obsidian） ⇒ git actions部署pages ⇒ 公开仓库（chyuhung.github.io）\n\ngit actions 代码\n\nname: Deploy Quartz site to GitHub Pages\n \non:\n  push:\n    branches:\n      - v4\n \npermissions:\n  contents: read\n  pages: write\n  id-token: write\n \nconcurrency:\n  group: &quot;pages&quot;\n  cancel-in-progress: false\n \njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0 # Fetch all history for git info\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18.14\n      - name: Install Dependencies\n        run: npm ci\n      - name: Build Quartz\n        run: npx quartz build\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: ${{ secrets.ID_RSA_HUGO_DEPLOY }}\n          external_repository: chyuhung/chyuhung.github.io\n          publish_branch: main\n          publish_dir: ./public\n          commit_message: ${{ github.event.head_commit.message }}\n\nkey配置\n\n使用ssh-keygen生成一对公钥和密钥，在代码仓库（quartz-obsidian）secrets中添加私钥，在pages仓库（chyuhung.github.io）添加公钥\n\n勿以善小而不为\n\n如有错误欢迎指正！"},"tags":{"title":"tags","links":["基础技能/基础技能","自动化和编程/自动化和编程","云计算和虚拟化/云计算和虚拟化","应用部署和容灾/应用部署和容灾","监控和日志管理/监控和日志管理","安全和权限管理/安全和权限管理","网络和存储管理/网络和存储管理","故障排除和性能优化/故障排除和性能优化","文档和沟通能力/文档和沟通能力"],"tags":[],"content":"\n\n基础技能\n\n操作系统（如 Linux、Unix、Windows）的基本原理和命令行操作\n网络协议和网络基础知识\n编程基础（如 Python、Shell、Perl）\n\n\n\n自动化和编程\n\n自动化工具（如 Ansible、Chef、Puppet）\n脚本编程和编写自动化脚本\n版本控制系统（如 Git、SVN）\n\n\n\n云计算和虚拟化\n\n云计算基础概念和服务模型（如 IaaS、PaaS、SaaS）\n虚拟化技术（如 VMware、KVM、Docker）\n容器编排和管理工具（如 Kubernetes）\n\n\n\n应用部署和容灾\n\nWeb 服务器和应用服务器的部署和配置（如 Nginx、Apache、Tomcat）\n高可用性和容灾技术（如负载均衡、故障转移、备份恢复）\n\n\n\n监控和日志管理\n\n监控系统的搭建和配置（如 Zabbix、Prometheus）\n日志管理和分析工具（如 ELK Stack、Splunk）\n\n\n\n安全和权限管理\n\n系统安全和漏洞管理\n访问控制和权限管理（如 LDAP、RBAC）\n防火墙和网络安全配置\n\n\n\n网络和存储管理\n\n网络设备的配置和管理\n存储管理和数据备份策略\n数据库管理（如 MySQL、PostgreSQL、MongoDB）\n\n\n\n故障排除和性能优化\n\n系统故障排查和调优\n性能监测和性能优化技术\n容量规划和资源管理\n\n\n\n文档和沟通能力\n\n技术文档编写和维护\n团队协作和沟通能力\n问题解决和故障处理技巧\n\n\n"},"云计算和虚拟化/openstack":{"title":"openstack","links":[],"tags":["云计算和虚拟化"],"content":"openstack集群健康检查\nopenstack-status"},"云计算和虚拟化/云计算和虚拟化":{"title":"云计算和虚拟化","links":[],"tags":[],"content":"\n\n云计算和虚拟化\n\n云计算基础概念和服务模型（如 IaaS、PaaS、SaaS）\n虚拟化技术（如 VMware、KVM、Docker）\n容器编排和管理工具（如 Kubernetes）\n\n\n"},"基础技能/go":{"title":"go","links":[],"tags":["基础技能"],"content":""},"基础技能/python基础":{"title":"python基础","links":[],"tags":["基础技能"],"content":"初识Python\n版本\n版本号分为三段，形如A.B.C，版本大更新增加A，新功能增加B，小改动增加C\n优缺点\n优点\n\n简单，学习曲线低\n开放源代码，生态强大\n解释型语言移植性强\n支持面向对象和函数式编程\n代码规范可读性强\n\n缺点\n\n执行效率稍微低\n代码无法加密\n\n解释器\n官方的Python解释器是用C语言实现的，也是使用最为广泛的Python解释器，通常称之为CPython\n应用领域\n后端开发、DevOps、爬虫、自动化测试、数据分析、机器学习\n运行\n单行注释以#开头，多行注释以&#039;&#039;&#039;开头和结尾\n# hello world 示例\nprint(&#039;hello, world!&#039;)\n开发工具\n安装python 自带集成开发工具IDLE（命令行交互式），实际开发不方便使用，通常使用pycharm或者vscode\n语言元素\n以python3进行总结\n\n整型 int 0b100 0x100 0o100\n浮点型 123.456\n字符串 “hello”\n布尔 true和false\n复数 与数学的i不同，使用j表示\n\n在python中可以使用type函数对类型进行检查\na = 100\nb = 12.345\nc = 1 + 5j\nd = &#039;hello, world&#039;\ne = True\nprint(type(a))    # &lt;class &#039;int&#039;&gt;\nprint(type(b))    # &lt;class &#039;float&#039;&gt;\nprint(type(c))    # &lt;class &#039;complex&#039;&gt;\nprint(type(d))    # &lt;class &#039;str&#039;&gt;\nprint(type(e))    # &lt;class &#039;bool&#039;&gt;\n变量命名\n硬性规则\n\n字母、数字和下划线，数字不开头\n大小写敏感\n关键词和系统保留字不可用\n\nPEP 8要求\n\n小写字母，多个单词使用下划线\n受保护实例属性下划线开头\n私有实例属性两个下划线开头\n\n运算符\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n运算符描述[] [:]下标，切片**指数~ + -按位取反, 正负号* / % //乘，除，模，整除+ -加，减&gt;&gt; &lt;&lt;右移，左移&amp;按位与^ |按位异或，按位或&lt;= &lt; &gt; &gt;=小于等于，小于，大于，大于等于== !=等于，不等于is is not身份运算符in not in成员运算符not or and逻辑运算符= += -= *= /= %= //= **= &amp;=运算赋值\n分支结构\nif x &gt; 1:\n    y = 3 * x - 5\nelif x &gt;= -1:\n    y = x + 2\nelse:\n    y = 5 * x + 3\n循环结构\nfor x in range(101):\n    sum += x\n\n\nrange(1, 101, 2) 产生1到100的奇数，2是步长\n\nwhile True:\n    number = int(input(&#039;请输入: &#039;))\n    if number &lt; 1:\n        print(&#039;1&#039;)\n    elif number &gt; 1:\n        print(&#039;0&#039;)\n    else:\n        print(&#039;-1&#039;)\n        break\nbreak终止所在的循环, continue放弃本次循环后续的代码\n函数和模块\ndef关键字定义函数，return关键字返回值\ndef fac(num):\n    &quot;&quot;&quot;求阶乘&quot;&quot;&quot;\n    result = 1\n    for n in range(1, num + 1):\n        result *= n\n    return result\n函数参数\nPython中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持函数的重载\nfrom random import randint\n \n \ndef roll_dice(n=2):\n    &quot;&quot;&quot;摇色子&quot;&quot;&quot;\n    total = 0\n    for _ in range(n):\n        total += randint(1, 6)\n    return total\n \n \ndef add(a=0, b=0, c=0):\n    &quot;&quot;&quot;三个数相加&quot;&quot;&quot;\n    return a + b + c\n \n \n# 如果没有指定参数那么使用默认值摇两颗色子\nprint(roll_dice())\n# 摇三颗色子\nprint(roll_dice(3))\nprint(add())\nprint(add(1))\nprint(add(1, 2))\nprint(add(1, 2, 3))\n# 传递参数时可以不按照设定的顺序进行传递\nprint(add(c=50, a=100, b=200))\n如果会对0个或多个参数进行加法运算，在不确定参数个数的时候，可以使用可变参数\n# 在参数名前面的*表示args是一个可变参数\ndef add(*args):\n    total = 0\n    for val in args:\n        total += val\n    return total\n \n \n# 在调用add函数时可以传入0个或多个参数\nprint(add())\nprint(add(1))\nprint(add(1, 2))\nprint(add(1, 2, 3))\nprint(add(1, 3, 5, 7, 9))\n模块管理函数\n如果在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的\ndef foo():\n    print(&#039;hello, world!&#039;)\n \n \ndef foo():\n    print(&#039;goodbye, world!&#039;)\n \n \n# 下面的代码会输出什么呢？\nfoo()\nPython中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过import关键字导入指定的模块就可以区分到底要使用的是哪个模块中的foo函数\nimport module1 as m1\nimport module2 as m2\n \nm1.foo()\nm2.foo()\n如果导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是”__main__”\ndef foo():\n    pass\n \n \ndef bar():\n    pass\n \n \n# __name__是Python中一个隐含的变量它代表了模块的名字\n# 只有被Python解释器直接执行的模块的名字才是__main__\nif __name__ == &#039;__main__&#039;:\n    print(&#039;call foo()&#039;)\n    foo()\n    print(&#039;call bar()&#039;)\n    bar()\n作用域\nPython查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索\ndef foo():\n    global a\n    a = 200\n    print(a)  # 200\n \n \nif __name__ == &#039;__main__&#039;:\n    a = 100\n    foo()\n    print(a)  # 200\n使用global关键字来指示函数中的变量来自于全局作用域，如果希望函数内部的函数能够修改嵌套作用域中的变量，可以使用nonlocal关键字来指示变量来自于嵌套作用域，在实际开发中，应该尽量减少对全局变量的使用\n如果希望将一个局部变量的生命周期延长，使其在定义它的函数调用结束后依然可以使用它的值，这时候就需要使用闭包\n说明： 很多人经常会将“闭包”和“匿名函数”混为一谈，但实际上它们并不是一回事，如果想了解这个概念，可以看看维基百科的解释或者知乎上对这个概念的讨论\n字符串和常用数据结构\n数值类型是标量类型，也就是说这种类型的对象没有可以访问的内部结构；而字符串类型是一种结构化的、非标量类型，所以才会有一系列的属性和方法\n定义列表可以将列表的元素放在[]中，多个元素用,进行分隔，可以使用for循环对列表元素进行遍历，也可以使用[]或[:]运算符取出列表中的一个或多个元素\n生成式和生成器\nf = [x for x in range(1, 10)]\nprint(f)\nf = [x + y for x in &#039;ABCDE&#039; for y in &#039;1234567&#039;]\nprint(f)\n# 用列表的生成表达式语法创建列表容器\n# 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间\nf = [x ** 2 for x in range(1, 1000)]\nprint(sys.getsizeof(f))  # 查看对象占用内存的字节数\nprint(f)\n# 请注意下面的代码创建的不是一个列表而是一个生成器对象\n# 通过生成器可以获取到数据但它不占用额外的空间存储数据\n# 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)\nf = (x ** 2 for x in range(1, 1000))\nprint(sys.getsizeof(f))  # 相比生成式生成器不占用存储数据的空间\nprint(f)\nfor val in f:\n    print(val)\nPython中还有另外一种定义生成器的方式，就是通过yield关键字将一个普通函数改造成生成器函数，示例斐波拉切数列的生成器\ndef fib(n):  \n    a, b = 0, 1  \n    for _ in range(n):  \n        a, b = b, a + b  \n        yield a  \n  \n  \ndef main():  \n    for val in fib(20):  \n        print(val)  \n  \n  \nif __name__ == &#039;__main__&#039;:  \n    main()  \n  \n# 执行结果  \n# n=0,a=0,b=1  \n# n=1,a=1,b=1  \n# n=2,a=1,b=2  \n# n=3,a=2,b=3  \n# n=4,a=3,b=5\n# ..."},"基础技能/shell":{"title":"shell","links":[],"tags":["基础技能"],"content":""},"基础技能/vue":{"title":"vue","links":[],"tags":["基础技能"],"content":"安装nodejs\n下载地址 Node.js 中文网 (nodejs.com.cn)\nnodejs安装步骤 Installation · nodejs/help Wiki (github.com)\nlinux安装nodejs参考命令\n[root@ctl01 tmp]# tar -xf node-v18.19.0-linux-x64.tar.xz\n[root@ctl01 tmp]# mv node-v18.19.0-linux-x64 nodejs\n[root@ctl01 tmp]# mv nodejs /usr/local/\n[root@ctl01 tmp]# echo &quot;export PATH=$PATH:/usr/local/nodejs/bin&quot; &gt;&gt; /etc/profile\n[root@ctl01 tmp]# source /etc/profile\n证书过期处理\n# vue创建项目报错\n$ error An unexpected error occurred: &quot;https://registry.npm.taobao.org/@vue%2fcli-plugin-babel: certificate has expired&quot;.\n# 首先更换镜像地址\n$ npm config set registry https://registry.npmmirror.com\n# 调整用户目录下配置\n$ cat .vuerc\n{\n  &quot;useTaobaoRegistry&quot;: false,#如果为true调整为false，如果为false调整为true\n  &quot;packageManager&quot;: &quot;yarn&quot;\n}"},"基础技能/基础技能":{"title":"基础技能","links":[],"tags":[],"content":"\n\n基础技能\n\n操作系统（如 Linux、Unix、Windows）的基本原理和命令行操作\n网络协议和网络基础知识\n编程基础（如 Python、Shell、Perl）\n\n\n"},"安全和权限管理/安全和权限管理":{"title":"安全和权限管理","links":[],"tags":[],"content":"\n\n安全和权限管理\n\n系统安全和漏洞管理\n访问控制和权限管理（如 LDAP、RBAC）\n防火墙和网络安全配置\n\n\n"},"应用部署和容灾/应用部署和容灾":{"title":"应用部署和容灾","links":[],"tags":[],"content":"\n\n应用部署和容灾\n\nWeb 服务器和应用服务器的部署和配置（如 Nginx、Apache、Tomcat）\n高可用性和容灾技术（如负载均衡、故障转移、备份恢复）\n\n\n"},"故障排除和性能优化/故障排除和性能优化":{"title":"故障排除和性能优化","links":[],"tags":[],"content":"\n\n故障排除和性能优化\n\n系统故障排查和调优\n性能监测和性能优化技术\n容量规划和资源管理\n\n\n"},"文档和沟通能力/文档和沟通能力":{"title":"文档和沟通能力","links":[],"tags":[],"content":"\n\n文档和沟通能力\n\n技术文档编写和维护\n团队协作和沟通能力\n问题解决和故障处理技巧\n\n\n"},"监控和日志管理/监控和日志管理":{"title":"监控和日志管理","links":[],"tags":[],"content":"\n\n监控和日志管理\n\n监控系统的搭建和配置（如 Zabbix、Prometheus）\n日志管理和分析工具（如 ELK Stack、Splunk）\n\n\n"},"网络和存储管理/pgsql":{"title":"pgsql","links":[],"tags":["网络和存储管理"],"content":""},"网络和存储管理/网络和存储管理":{"title":"网络和存储管理","links":[],"tags":[],"content":"\n\n网络和存储管理\n\n网络设备的配置和管理\n存储管理和数据备份策略\n数据库管理（如 MySQL、PostgreSQL、MongoDB）\n\n\n"},"自动化和编程/ansible":{"title":"ansible","links":[],"tags":["自动化和编程"],"content":""},"自动化和编程/git":{"title":"git","links":[],"tags":["自动化和编程"],"content":"常规命令\n查看所有分支\ngit ls-remote --heads ssh://git@10.254.180.148:20495/PZCPHPT.ZDHBS/auto_upgrade_script.git\n\n克隆最近一次提交\ngit clone --depth=1 ssh://git@10.254.180.148:20495/PZCPHPT.ZDHBS/auto_upgrade_script.git\n\n配置用户名、邮箱\ngit config --global user.name chyuhung\ngit config --global user.email 977599667@qq.com\n\n硬重置本地，将当前分支重置到远程仓库中 origin 的 dev 分支的最新提交\ngit reset --hard origin/dev\n\n大仓库拉取\n\n常规方式\n\n1、拉取指定分支\ngit clone -b dev ssh://git@xxxx/xxxx/auto_deploy_script.git\n2、指定分支并只拉取最近一次提交\ngit clone -b dev --depth=1 ssh://git@xxxx/xxxx/auto_upgrade_script.git\n\n新建空仓库拉取\n\n1、本地直接新建对应仓库\nmkdir &lt;repo名称&gt;\n2、初始化git仓库（即新建.git/）\ngit init\n3、配置remote origin\ngit remote add origin &lt;repo地址&gt;\n4、新建待拉取对应分支（默认为master）\ngit checkout -b &lt;对应分支名&gt;\n5、拉取特定分支\ngit pull origin &lt;对应分支名&gt;\n分支合并\n1、切换到特定分支并拉取最新代码，完成相关代码修改提交\ngit checkout feature-compmgmt1015\ngit pull\n2、切换到主分支，拉取最新代码\ngit  checkout dev\ngit pull\n3、合并代码到主分支\ngit merge feature-compmgmt1015\n# 解决有合并冲突的文件\n# git restore &lt;非我们改动的文件&gt;\n# git add . &amp;&amp; git commit -m &#039;解决有合并冲突的文件&#039;\ngit push\n4、查看git日志\ngit log\n5、恢复文件\ngit restore --staged .\ngit restore  .\n6、显示指定commit修改内容\ngit show 685b7067992b4ee1230fe38cc1c9dec2beb60e55\ngit status\n分支跟踪\n设置本地dev分支跟踪远程dev分支\n$ git remote -v\norigin  ssh://git@xxxx/xxxx/auto_upgrade_script.git (fetch)\norigin  ssh://git@xxxx/xxxx/auto_upgrade_script.git (push)\n \n$ git checkout dev\nSwitched to branch &#039;dev&#039;\n \n$  git branch --set-upstream-to=origin/dev dev\nbranch &#039;dev&#039; set up to track &#039;origin/dev&#039;."},"自动化和编程/自动化和编程":{"title":"自动化和编程","links":[],"tags":[],"content":"\n\n自动化和编程\n\n自动化工具（如 Ansible、Chef、Puppet）\n脚本编程和编写自动化脚本\n版本控制系统（如 Git、SVN）\n\n\n"}}